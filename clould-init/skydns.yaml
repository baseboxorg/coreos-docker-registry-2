#cloud-config

coreos:
    etcd:
        addr: $private_ipv4:4001
        peer-addr: $private_ipv4:7001
        # runing a multi-node cluster with discovery mode:
        # generate a new token for each unique cluster from https://discovery.etcd.io/new
        # WARNING: replace each time you 'vagrant destroy'
        #discovery: https://discovery.etcd.io/<token>
    fleet:
        public-ip: $private_ipv4
    units:
        - name: etcd.service
          command: start
        - name: fleet.service
          command: start
        - name: docker.service
          command: start
          content: |
              .include /usr/lib/systemd/system/docker.service
            
              [Service]
              # Use our own dns, instead of the host's.
              EnvironmentFile=/var/lib/skydns/config
              ExecStart=
              ExecStart=/usr/bin/docker -d -s=btrfs -r=false -H fd:// --dns=$private_ipv4 --dns-search=${DOMAIN}
        - name: docker-tcp.socket
          command: start
          enable: true
          content: |
              [Unit]
              Description=Docker Socket for the API
              
              [Socket]
              ListenStream=2375
              Service=docker.service
              BindIPv6Only=both
              
              [Install] 
              WantedBy=sockets.target

        - name: skydns.install.service
          command: start
          content: |
              [Unit]
              Description=SkyDNS Installer
              
              [Service]
              Type=oneshot
              RemainAfterExit=true
              ExecStart=-/usr/bin/mkdir -p /var/lib/skydns/bin
              ExecStart=-/usr/bin/curl -L -o /var/lib/skydns/bin/skydns \
                   https://github.com/xuwang/skydns-docker/releases/download/skydns-7025dba3834f/skydns
              ExecStart=/usr/bin/chmod 755 /var/lib/skydns/bin/skydns
        - name: skydns.service
          command: start
          content: |
              [Unit]
              Description=skydns
              Requires=skydns.install.service
              Wants=etcd.service
              After=skydns.install.service
              After=etcd.service
            
              [Service]  
              Type=simple
              Restart=always
              RestartSec=5
              ReadOnlyDirectories=/etc
              EnvironmentFile=/etc/environment
              EnvironmentFile=/var/lib/skydns/config
              PermissionsStartOnly=true
              # Set skydns namespace ns=${DOMAIN}
              ExecStartPre=/usr/bin/etcdctl set /skydns/${DOMAIN_PATH}/dns/ns '{"host":"$private_ipv4"}'
              ExecStartPre=/usr/bin/etcdctl set /skydns/${DOMAIN_PATH}/%H '{"host":"$private_ipv4"}'
              # Set skydns configuration in etcd
              ExecStartPre=/usr/bin/etcdctl set /skydns/config ${SKYDNS_CONFIG}
              ExecStart=/var/lib/skydns/bin/skydns -verbose=true
              ExecStopPost=-/usr/bin/etcdctl rm /skydns/config
              ExecStopPost=-/usr/bin/etcdctl rm /skydns/${DOMAIN_PATH}/dns/ns
              ExecStopPost=-/usr/bin/etcdctl rm /skydns/${DOMAIN_PATH/%H
              
              [Install]  
              WantedBy=multi-user.target

write_files:
  - path: /var/lib/skydns/config
    content: |
        DOMAIN=docker.local
        DOMAIN_PATH=local/docker
        SKYDNS_CONFIG='{"domain":"docker.local","dns_addr":"$private_ipv4:53","ttl":3600, "nameservers": ["8.8.8.8:53","8.8.4.4:53"]}'
  - path: /etc/resolv.conf
    permissions: 0644
    owner: root
    content: |
      domain docker.local
      nameserver $private_ipv4
      nameserver 8.8.8.8
  - path: /etc/profile.d/alias.sh
    content: |
        alias lal="ls -al"
        alias ll="ls -l"
        alias dk="docker "
        alias dkc="dk ps"
        alias dkm="dk images"
        alias dki="dk inspect"
        alias dkb="dk build"
        alias cleandkc="dkc -a --no-trunc| grep Exit | awk '{print \$1}' | xargs -L 1 -r docker rm"
        alias cleandkm="dkm -a --no-trunc | grep none | awk '{print \$3}' | xargs -L 1 -r docker rmi"
        alias cleandk="cleandkc && cleandkm"
        alias killdk="dk rm -f $(docker ps -qa)"
        alias sd="sudo systemctl"
        alias sdl="sd list-units"
        alias sdcat="sd cat"
        alias cci="sudo coreos-cloudinit --from-file"
        alias j="journalctl"
        alias jfu="journalctl -f -u"
        alias e="etcdctl"
        alias els="e ls --recursive"
        alias eget="e get"
        alias eset="e set"
        alias f="fleetctl -strict-host-key-checking=false"
        alias fcat="f cat"
        alias fss="f status"
        alias fst="f start"
        alias fdy="f destroy"
        alias flm="f list-machines"
        alias flu="f list-units"
        alias fsh="f ssh"
        function dkip() { docker inspect --format "{{ .NetworkSettings.IPAddress }}" $1 ; }
        function dkid() { docker inspect --format "{{ .ID }}" $1 ; }
        function dkim() { docker inspect --format "{{ .Image }}" $1 ; }
        function dkst() { docker inspect --format "{{ .State.Running }}" $1 ; }
        function sdrit() { sudo docker run -i -t $1 bash ; }
        function nsa { sudo nsenter -p -u -m -i -n -t $(docker inspect -f "{{ .State.Pid }}" $1) ; }
